{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UpdateProfilePicture = function UpdateProfilePicture(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    file = _useState2[0],\n    setFile = _useState2[1];\n  var imageList = ['https://example.com/image1.jpg', 'https://example.com/image2.jpg', 'https://example.com/image3.jpg'];\n  var updateProfile = function updateProfile() {\n    navigation.goBack();\n  };\n  var selectImage = function selectImage(imageUri) {\n    setFile(imageUri);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.header,\n      children: \"Choose Profile Picture:\"\n    }), _jsx(View, {\n      style: styles.imageList,\n      children: imageList.map(function (imageUri) {\n        return _jsx(TouchableOpacity, {\n          style: styles.imageContainer,\n          onPress: function onPress() {\n            return selectImage(imageUri);\n          },\n          children: _jsx(Image, {\n            source: {\n              uri: imageUri\n            },\n            style: styles.image\n          })\n        }, imageUri);\n      })\n    }), file && _jsxs(View, {\n      style: styles.selectedImageContainer,\n      children: [_jsx(Text, {\n        style: styles.selectedImageText,\n        children: \"Selected Image:\"\n      }), _jsx(Image, {\n        source: {\n          uri: file\n        },\n        style: styles.selectedImage\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: updateProfile,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Update Profile\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 16\n  },\n  header: {\n    fontSize: 20,\n    marginBottom: 16\n  },\n  imageList: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16\n  },\n  imageContainer: {\n    borderRadius: 8,\n    overflow: 'hidden'\n  },\n  image: {\n    width: 100,\n    height: 100,\n    borderRadius: 8\n  },\n  selectedImageContainer: {\n    marginTop: 16,\n    alignItems: 'center'\n  },\n  selectedImageText: {\n    fontSize: 16,\n    marginBottom: 8\n  },\n  selectedImage: {\n    width: 200,\n    height: 200,\n    borderRadius: 8\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    padding: 10,\n    borderRadius: 8,\n    marginTop: 16\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default UpdateProfilePicture;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","StyleSheet","Image","jsx","_jsx","jsxs","_jsxs","UpdateProfilePicture","_ref","navigation","_useState","_useState2","_slicedToArray","file","setFile","imageList","updateProfile","goBack","selectImage","imageUri","style","styles","container","children","header","map","imageContainer","onPress","source","uri","image","selectedImageContainer","selectedImageText","selectedImage","button","buttonText","create","flex","justifyContent","alignItems","padding","fontSize","marginBottom","flexDirection","borderRadius","overflow","width","height","marginTop","backgroundColor","color","fontWeight"],"sources":["C:/Users/jteet/Desktop/CODE/profile-app-jteeter/src/UpdateProfilePicture.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, Image } from 'react-native';\r\n\r\nconst UpdateProfilePicture = ({ navigation }) => {\r\n  // Stores the selected image URI\r\n  const [file, setFile] = useState(null);\r\n\r\n  // List of predefined images\r\n  const imageList = [\r\n    'https://example.com/image1.jpg',\r\n    'https://example.com/image2.jpg',\r\n    'https://example.com/image3.jpg',\r\n  ];\r\n\r\n  // Function to update the profile picture\r\n  const updateProfile = () => {\r\n    // Implement your logic to update the profile with the selected image (e.g., API call)\r\n    // For now, simply navigate back to the previous screen (you might need to adjust this logic)\r\n    navigation.goBack();\r\n  };\r\n\r\n  // Function to select an image from the list\r\n  const selectImage = (imageUri) => {\r\n    setFile(imageUri);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.header}>Choose Profile Picture:</Text>\r\n\r\n      {/* Display the list of images */}\r\n      <View style={styles.imageList}>\r\n        {imageList.map((imageUri) => (\r\n          <TouchableOpacity\r\n            key={imageUri}\r\n            style={styles.imageContainer}\r\n            onPress={() => selectImage(imageUri)}\r\n          >\r\n            <Image source={{ uri: imageUri }} style={styles.image} />\r\n          </TouchableOpacity>\r\n        ))}\r\n      </View>\r\n\r\n      {/* Conditionally render the selected image */}\r\n      {file && (\r\n        <View style={styles.selectedImageContainer}>\r\n          <Text style={styles.selectedImageText}>Selected Image:</Text>\r\n          <Image source={{ uri: file }} style={styles.selectedImage} />\r\n        </View>\r\n      )}\r\n\r\n      {/* Button to update the profile picture */}\r\n      <TouchableOpacity style={styles.button} onPress={updateProfile}>\r\n        <Text style={styles.buttonText}>Update Profile</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 16,\r\n  },\r\n  header: {\r\n    fontSize: 20,\r\n    marginBottom: 16,\r\n  },\r\n  imageList: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 16,\r\n  },\r\n  imageContainer: {\r\n    borderRadius: 8,\r\n    overflow: 'hidden',\r\n  },\r\n  image: {\r\n    width: 100,\r\n    height: 100,\r\n    borderRadius: 8,\r\n  },\r\n  selectedImageContainer: {\r\n    marginTop: 16,\r\n    alignItems: 'center',\r\n  },\r\n  selectedImageText: {\r\n    fontSize: 16,\r\n    marginBottom: 8,\r\n  },\r\n  selectedImage: {\r\n    width: 200,\r\n    height: 200,\r\n    borderRadius: 8,\r\n  },\r\n  button: {\r\n    backgroundColor: '#007AFF',\r\n    padding: 10,\r\n    borderRadius: 8,\r\n    marginTop: 16,\r\n  },\r\n  buttonText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default UpdateProfilePicture;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}